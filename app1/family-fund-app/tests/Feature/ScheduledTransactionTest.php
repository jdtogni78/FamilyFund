<?php namespace Tests\APIs;

use App\Http\Controllers\Traits\ScheduledJobTrait;
use App\Models\AccountBalance;
use App\Models\FundReportExt;
use App\Models\ScheduledJobExt;
use App\Models\ScheduleExt;
use App\Models\TransactionExt;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Carbon;
use Log;
use Tests\DataFactory;
use Tests\TestCase;
use Tests\ApiTestTrait;
use Exception;
use Mockery\MockInterface;

class ScheduledTransactionTest extends TestCase
{
    use ApiTestTrait, WithoutMiddleware, DatabaseTransactions;
    use ScheduledJobTrait;

    private DataFactory $factory;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->factory = $factory = new DataFactory();
        $factory->verbose = $this->verbose;
        $factory->createFund(1000, 1000, '2021-01-01');
        $factory->createUser();
    }

    /**
     * @test
     */
    public function test_schedule_transaction()
    {
        $this->debug("\n\n\n");
        /** @var DataFactory $factory */
        $factory = $this->factory;
        $expectedDate = Carbon::parse('2024-12-22')->previous(Carbon::MONDAY); // 2024-12-16
        $firstDate = $expectedDate->copy()->subDays(2); // 2024-12-14
        $date = $firstDate->copy(); // 2024-12-14
        $value = 100;
        $dow = 1; // monday

        /* Should run by monday, 2024-12-14 (asap), 2024-12-16, 2024-12-23 */

        /* @var ScheduledJobExt $job */
        /* @var TransactionExt $stran */
        list ($schedule, $job, $stran) = $factory->createScheduledTransaction(
            ScheduleExt::TYPE_DAY_OF_WEEK, $dow, $date, $value); // 2024-12-14

        $expectedCount = 3; // 1 for monday, 1 for first time ever
        // $this->verbose = true;
        $trans = $this->_testScheduledJob($date, ScheduledJobExt::ENTITY_TRANSACTION, $job, $expectedCount);

        // type, status, value, shares, timestamp, account_id, descr, flags, scheduled_job_id,
        $this->debug('trans: ' . json_encode($trans));
        $this->debug('expectedDate: ' . $expectedDate->toDateString());
        $this->debug('firstDate: ' . $firstDate->toDateString());
        $this->assertEquals('2024-12-14', $trans[0]->timestamp->toDateString());
        $this->assertEquals('2024-12-16', $trans[1]->timestamp->toDateString());
        $this->assertEquals('2024-12-23', $trans[2]->timestamp->toDateString());

        $balValue = 0;
        foreach ($trans as $tran) {
            /** @var TransactionExt $tran */
            $this->assertEquals($value, $tran->value);
            $this->assertEquals(TransactionExt::TYPE_PURCHASE, $tran->type);
            $this->assertEquals(TransactionExt::STATUS_CLEARED, $tran->status);
            $this->assertGreaterThan(0, $tran->shares);
            $this->assertEquals($stran->account_id, $tran->account_id);
            $this->assertEquals($stran->descr, $tran->descr);
            $this->assertEquals($stran->flags, $tran->flags);
            // make sure there is a balance
            $bal = $tran->balanceAsOf($tran->timestamp);
            $balValue += $tran->shares;
            $this->assertEquals($balValue, $bal->shares);
        }
    }

    protected function createFundReport(array $input) {
        $fundReport = FundReportExt::create($input);
        $this->validateReportEmails($fundReport);
        $fundReport->save();
        return $fundReport;
    }

    // test schedule report
    public function test_sched_fund_report() {
        $this->debug("\n\n\n");
        $factory = $this->factory;
        // needs data to exist, lets use an older sunday
        // $date = Carbon::today()->subDays(7)->previous(Carbon::SUNDAY);
        $date = Carbon::createFromDate(2024, 12, 22);
        $firstDate = $date->copy();
        Log::info('firstDate: ' . $firstDate->toDateString());

        // create prices to trick "missing data for fund report"
        $asset = $factory->createAsset('FFIB');
        for ($i = 0; $i < 7; $i++) {
            $tomorrow = $date->copy()->addDay();
            $factory->createAssetPrice($asset, 10.2, $date, $tomorrow);
            $date = $tomorrow;
        }
        $date = $firstDate->copy();
        $this->debug('date: ' . $date->toDateString());
        /* @var ScheduledJobExt $job */
        /* @var FundReportExt $srep */
        list ($schedule, $job, $srep) = $factory->createScheduledFundReport(ScheduleExt::TYPE_DAY_OF_WEEK,
            2, $factory->fund, FundReportExt::TYPE_ADMIN, $date);

        $expectedCount = 3; // monday (in delay of prev week) and tue
        $rep = $this->_testScheduledJob($date, ScheduledJobExt::ENTITY_FUND_REPORT, $job, $expectedCount);

        $this->debug('job: ' . json_encode($job->toArray()));
        $this->debug('rep: ' . json_encode($rep));

        // type, as_of,
        $this->assertEquals($firstDate->next(Carbon::TUESDAY)->toDateString(), $rep[1]->as_of->toDateString());
        $this->assertEquals($firstDate->subDays(7)->toDateString(), $rep[0]->as_of->toDateString());
        $this->assertEquals($srep->type, $rep[0]->type);
        $this->assertEquals($srep->type, $rep[1]->type);
        $this->assertEquals($srep->type, $rep[2]->type);
    }

    private function _testScheduledJob(Carbon $date, $entityDescrFilter, ScheduledJobExt $job, $expected=1): mixed
    {
        $all = [];
        // $this->verbose = true;
        $endDate = $date->copy()->addDays(10);
        Log::info("Test sched fund report from " . $date->format('Y-m-d') . "  to " . $endDate->format('Y-m-d') . " ********");
        for ($i = 0; $i < 10; $i++) {
            $this->debug('At date: ' . $date->toDateString() . ', dow: ' . $date->dayOfWeek);
            $all[] = list($ret, $errors) = $this->scheduleDueJobs($date, $entityDescrFilter);
            $this->debug('Scheduled jobs: ' . json_encode($ret));
            $date->addDay();
        }
        // count all scheduled jobs by this schedule id
        $found = [];
        $count = 0;
        foreach ($all as list ($ret, $errors)) {
            foreach ($ret as $obj) {
                if ($obj->scheduled_job_id == $job->id) {
                    $count++;
                    $found[] = $obj;
                    $this->debug('Found scheduled job: ' . json_encode($obj->toArray()));
                }
            }
        }
        $this->assertEquals($expected, $count, 'One scheduled job');
        $this->debug('job: ' . json_encode($job->toArray()));

        foreach ($found as $obj) {  
            $this->assertEquals($job->id, $obj->scheduled_job_id);
        }
        return $found;
    }
}
