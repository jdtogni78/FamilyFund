<?php 

namespace Tests\Feature;

use App\Http\Resources\TransactionResource;
use App\Models\AssetExt;
use App\Models\TransactionExt;
use CpChart\Data;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;
use Tests\DataFactory;
use Tests\TestCase;
use Tests\ApiTestTrait;
use App\Models\Transaction;
use Exception;
use App\Http\Controllers\Traits\CashDepositTrait;
use Illuminate\Support\Facades\DB;
use App\Models\CashDepositExt;
use App\Models\Account;
use App\Models\DepositRequestExt;

class CashDepositTratTest extends TestCase
{
    use ApiTestTrait, WithoutMiddleware, DatabaseTransactions;
    use CashDepositTrait;

    private DataFactory $factory;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->factory = $factory = new DataFactory();
        $fund = $factory->createFund(1000, 1000, '2021-01-01');
        $tp = $factory->createTradePortfolio(Carbon::today());
        $tp->account_name = 'U0000001';
        $tp->portfolio_id = $factory->portfolio->id;
        $tp->save();
//        $this->verbose = true;
    }

    private function csv_header() {
        return '"ClientAccountID","Description","Date/Time","SettleDate","Amount","Type","AccountAlias","CurrencyPrimary","FXRateToBase",'
            . '"Multiplier","AvailableForTradingDate","TransactionID","ClientReference","LevelOfDetail"' . "\n";
    }

    public function sample_csv1() {
        return 
            $this->csv_header()
            . $this->csv_header()
            . 'U0000001,"CASH RECEIPTS / ELECTRONIC FUND TRANSFERS","2025-01-13","2025-01-13","96.83",'
            . '"Deposits/Withdrawals","FamilyFund1","USD","1","0","2025-01-13","30868684949","FROM WISE US INC","DETAIL"' . "\n"
            . $this->csv_header()
            . '"U0000002","CASH RECEIPTS / ELECTRONIC FUND TRANSFERS","2025-01-14","2025-01-14","47.18",'
            . '"Deposits/Withdrawals","FamilyFund1","USD","1","0","2025-01-14","30890405303","FROM Wise Inc","DETAIL"' . "\n";
    }

    public function test_csv() {
        $str = $this->sample_csv1();
        list($headers, $data) = $this->csvFromString($str);
        
        $this->assertEquals('2025-01-13', $data[0]['AvailableForTradingDate']);
        $this->assertEquals(96.83, $data[0]['Amount']);
        $this->assertEquals('30868684949', $data[0]['TransactionID']);
        $this->assertEquals('U0000001', $data[0]['ClientAccountID']);
        $this->assertEquals('FROM WISE US INC', $data[0]['ClientReference']);

        $this->assertEquals('2025-01-14', $data[1]['AvailableForTradingDate']);
        $this->assertEquals(47.18, $data[1]['Amount']);
        $this->assertEquals('30890405303', $data[1]['TransactionID']);
        $this->assertEquals('U0000002', $data[1]['ClientAccountID']);
        $this->assertEquals('FROM Wise Inc', $data[1]['ClientReference']);

        for ($i = 0; $i < 2; $i++) {
            $this->assertEquals('CASH RECEIPTS / ELECTRONIC FUND TRANSFERS', $data[$i]['Description']);
            $this->assertEquals('Deposits/Withdrawals', $data[$i]['Type']);
            $this->assertEquals('FamilyFund1', $data[$i]['AccountAlias']);
            $this->assertEquals('USD', $data[$i]['CurrencyPrimary']);
            $this->assertEquals(1, $data[$i]['FXRateToBase']);
            $this->assertEquals(0, $data[$i]['Multiplier']);
            $this->assertEquals('DETAIL', $data[$i]['LevelOfDetail']);
        }
    }

    public function test_csv_from_file() {
        $file = __DIR__ . '/sample_cashdep.csv';
        list($headers, $data) = $this->csvFromFile($file);
        
        $this->assertEquals('U5843610', $data[0]['ClientAccountID']);
        $this->assertEquals('CASH RECEIPTS / ELECTRONIC FUND TRANSFERS', $data[0]['Description']);
        $this->assertEquals('2024-12-24', $data[0]['Date/Time']);
        $this->assertEquals('2024-12-24', $data[0]['SettleDate']);
        $this->assertEquals(20000, $data[0]['Amount']);
        $this->assertEquals('Deposits/Withdrawals', $data[0]['Type']);
        $this->assertEquals('FamilyFund1', $data[0]['AccountAlias']);
        $this->assertEquals('USD', $data[0]['CurrencyPrimary']);
        $this->assertEquals(1, $data[0]['FXRateToBase']);
        $this->assertEquals(0, $data[0]['Multiplier']);
        $this->assertEquals('2024-12-30', $data[0]['AvailableForTradingDate']);
        $this->assertEquals('30656602765', $data[0]['TransactionID']);
        $this->assertEquals('', $data[0]['ClientReference']);
        $this->assertEquals('DETAIL', $data[0]['LevelOfDetail']);
    }

    public function assert_sample_csv1($successes, $errors, $data) {
        $this->assertEquals(1, count($errors));
        $this->assertEquals('Trade portfolio not found for fund account: U0000002', $errors[0]);
        $this->assertEquals(1, count($successes));

        $this->assertEquals('2025-01-13', $data['cash_deposit']->date->format('Y-m-d'));
        $this->assertEquals(96.83, $data['cash_deposit']->amount);
        $this->assertEquals('30868684949 - FROM WISE US INC', $data['cash_deposit']->description);
        $this->assertEquals($this->factory->fundAccount->id, $data['cash_deposit']->account_id);

        $this->assertEquals('2025-01-13', $data['transaction']->timestamp->format('Y-m-d'));
        $this->assertEquals(96.83, $data['transaction']->value);
        $this->assertEquals(TransactionExt::TYPE_PURCHASE, $data['transaction']->type);
        $this->assertEquals(TransactionExt::FLAGS_CASH_ADDED, $data['transaction']->flags);
        $this->assertEquals('Cash Deposit ' . $data['cash_deposit']->id, $data['transaction']->descr);
        $this->assertEquals(TransactionExt::STATUS_CLEARED, $data['transaction']->status);
        $this->assertEquals($this->factory->fundAccount->id, $data['transaction']->account_id);
    }

    public function test_parse_cash_deposit() {
        list($successes, $errors, $data) = $this->parseCashDepositString($this->sample_csv1());
        $this->assert_sample_csv1($successes, $errors, $data[0]);
        $this->assertEquals(CashDepositExt::STATUS_DEPOSITED, $data[0]['cash_deposit']->status);
    }


    public function test_parse_cash_deposit_w_deposits() {
        $user1 = $this->factory->createUser();
        $user2 = $this->factory->createUser();
        $cd = $this->factory->createCashDeposit(96.83);
        $cd->status = CashDepositExt::STATUS_ALLOCATED;
        $cd->date = null;
        $cd->save();

        $dr1 = $this->factory->createDepositRequest($cd, $user1->accounts[0], 30.00);
        $dr2 = $this->factory->createDepositRequest($cd, $user2->accounts[0], 36.83);
        $dr3 = $this->factory->createDepositRequest($cd, $user2->accounts[0], 10.00);
        $dr4 = $this->factory->createDepositRequest($cd, $user2->accounts[0], 11.00);   
        $dr5 = $this->factory->createDepositRequest($cd, $user2->accounts[0], 12.00);   

        $dr1->status = DepositRequestExt::STATUS_APPROVED;
        $dr2->status = DepositRequestExt::STATUS_APPROVED;
        $dr3->status = DepositRequestExt::STATUS_REJECTED;
        $dr4->status = DepositRequestExt::STATUS_COMPLETED;
        $dr5->status = DepositRequestExt::STATUS_PENDING;
        
        $dr1->save();
        $dr2->save();
        $dr3->save();
        $dr4->save();
        $dr5->save();

        $str = $this->sample_csv1();        
        list($successes, $errors, $data) = $this->parseCashDepositString($str);
        $this->assert_sample_csv1($successes, $errors, $data[0]);
        $this->assertEquals(CashDepositExt::STATUS_COMPLETED, $data[0]['cash_deposit']->status);

        $deposits = $data[0]['deposits'];
        $totalAmount = $deposits[1];
        $this->assertEquals(66.83, $totalAmount);

        $unassigned = $deposits[2];
        $this->assertEquals(30.00, $unassigned);

        $deposits = $deposits[0];
        $this->assertEquals(4, count($deposits));

        $dep = $deposits[0]['deposit'];
        $this->assertEquals(30.00, $dep->amount);
        $this->assertEquals(DepositRequestExt::STATUS_COMPLETED, $dep->status);
        $this->assertEquals($user1->accounts[0]->id, $dep->account_id);

        $dep = $deposits[1]['deposit'];
        $this->assertEquals(36.83, $dep->amount);
        $this->assertEquals(DepositRequestExt::STATUS_COMPLETED, $dep->status);
        $this->assertEquals($user2->accounts[0]->id, $dep->account_id);

        // $dr3 wont result in changes/errors/output

        $this->assertEquals('Deposit request ' . $dr4->id . ' already completed - this is an inconsistent state'
            .' (status: Completed)', 
        $deposits[2]['error']);
        $dep = $deposits[2]['deposit'];
        $this->assertEquals(DepositRequestExt::STATUS_COMPLETED, $dep->status);

        $this->assertEquals('Deposit request ' . $dr5->id . ' rejected as was not approved before processing'
            .' (status: Pending)', 
        $deposits[3]['error']);
        $dep = $deposits[3]['deposit'];
        $this->assertEquals(DepositRequestExt::STATUS_REJECTED, $dep->status);

        // re-run the csv - no new cash deposit should be created
        list($successes, $errors, $data) = $this->parseCashDepositString($str);
        $this->assertEquals(0, count($successes));
        $this->assertEquals(1, count($errors));
        $this->assertEquals(0, count($data));
    }

}

