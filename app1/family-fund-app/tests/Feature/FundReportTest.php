<?php
namespace Tests\Feature;

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Tests\ApiTestTrait;
use Tests\DataFactory;

class FundReportTest extends TestCase
{
    use ApiTestTrait, WithoutMiddleware, DatabaseTransactions;

    public $startDt;
    public $endDt;
    public $fund;
    public array $post;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->startDt = '2022-01-01';
        $this->endDt   = '2022-03-01';
        $this->verbose = true;
    }

    public function testBasic()
    {
        $factory = new DataFactory();
        $factory->createFundWithMatching();
        $this->fund = $factory->fund;
        $factory->fundAccount->email_cc = "jtogni@gmail.com";
        $factory->fundAccount->save();
        $factory->createAssetWithPrice();
        $factory->createAssetWithPrice();

        $this->postAPI();

//        $this->assertCount(2, $this->data);
//        $this->assertEquals($account->nickname, $this->data['nickname']);
//        $this->assertCount(1, $this->resMR);
//        $mr = $this->resMR[0];
//        $this->assertEquals($factory->matchingRule->id, $mr['id']);
//        $value = $factory->matchTransaction->value;
//        $this->assertEquals($value, $this->resUsed);
//
//        // TODO: 2 tranMatchings
//        $transaction = $factory->transactions[0];
//        $matching = $account->accountMatchingRules()->first();
//        $matchTransaction = $factory->createTransaction($value/2, null, 'DIR', 'MAT');
//        $factory->createTransactionMatching($matching, $matchTransaction, $transaction);
//
//        $this->postAPI($account);
//        $this->assertResponse(1, $value + $value/2);
//
//        // TODO: 2 matchingRules
//        $factory->createMatchingRule(150, 100);
//        $factory->createAccountMatching();
//        $this->postAPI($account);
//        $this->assertResponse(2, $value + $value/2);
//        $this->assertEquals(0, $this->resMR[1]['used']);
    }

    protected function postAPI(): mixed
    {
        $this->post = [
            'fund_id'   => $this->fund->id,
            'type'      => 'ADM',
            'file'      => 'test.txt',
            'start_dt'  => $this->startDt,
            'end_dt'    => $this->endDt,
        ];

        if ($this->verbose) print_r("*** POST ".json_encode($this->post)."\n");
        $this->response = $this->json(
            'POST',
            '/api/fund_reports/', $this->post
        );

        $response = json_decode($this->response->getContent(), true);
        if ($this->verbose) print_r("response: " . json_encode($response,JSON_PRETTY_PRINT) . "\n");
        $this->assertApiSuccess();
        return $response;
    }

    protected function assertResponse($count, $used): void
    {
        $this->assertCount($count, $this->resMR);
        $this->assertEquals($used, $this->resUsed);
    }
}
