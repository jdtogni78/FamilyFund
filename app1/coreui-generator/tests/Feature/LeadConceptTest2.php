<?php
namespace Tests\Feature;

use DateTime;

class LeadConceptTest2 extends PortfolioAssetsUpdateBaseTest
{
    protected $base = 'http://familyfund.leadconcept.business/api/';
    protected $adjust = true;
    protected $cashId;
    protected $maxId;
    private $symbol;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createFund();
        $this->createPortfolio();
        $this->date = new DateTime("2022-01-09");
        $this->max_id = $this->getNextId('assets');
        $this->symbol = "Symbol_" . $this->max_id;
        $this->cashId = $this->getAsset('CASH');
        $this->getSampleRequestAt();
        $this->postAssetUpdates();
        $this->assertApiSuccess();
        $this->nextDay(30);
    }

    public function testUndefinedType(): void
    {
        $this->nextDay(1);

        print_r("\n** TEST * remove type\n\n");
        unset($this->post['symbols'][$this->symbol]['type']);
        print_r("\n** TEST * use non-existent symbol\n\n");
        $this->postAssetUpdates();

        print_r("\nVALIDATE: new asset is created with UNDEFINED type\n");
        $this->_get("assets/" . $this->max_id);
        $this->assertApiSuccess();
        $this->assertEquals("UND", $this->data['type']);
    }

    /**
     * @param $symbol
     * @return void
     */
    protected function testUnsupportedType($symbol): void
    {
        $this->nextDay(2);
        print_r("\n** TEST * using a random type \"aoesuhs\"\n\n");
        $this->post['symbols'][$symbol]['type'] = "asoehut";

        $this->postAssetUpdates(false, 404);
        print_r("\nVALIDATE: error: unsupported type\n");
    }

    /**
     * @param string $symbol
     * @return void
     */
    protected function testSameSymbolOtherSource(): void
    {
        $this->nextDay(3);
        print_r("\n** TEST * existing symbol with mismatched source\n\n");
        $this->max_id++;
        $this->symbol = "Symbol_" . $this->max_id;
        $this->getSampleRequestAt();
        $this->createAsset($this->symbol, 'test');

        $this->postAssetUpdates();
        print_r("\nVALIDATE: new asset is created\n");
        $this->validateAssetExists($this->symbol, $this->code);
    }

    protected function testUndefinedPosition() {
        $this->_testUndefinedField('position', 4);
    }

    protected function testUndefinedPrice() {
        $this->_testUndefinedField('price', 5);
    }

    protected function testUndefinedPositionPriceMode() {
        $this->post['mode'] = 'price';
        $this->_testUndefinedField('position', 10);
    }

    protected function testUndefinedPricePriceMode() {
        $this->post['mode'] = 'price';
        $this->_testUndefinedField('price', 11);
    }

    protected function _testUndefinedField($field, $days): void
    {
        $this->nextDay($days);
        print_r("\n** TEST * add 1 day to timestamp\n\n");
        print_r("\n** TEST * add a symbol2 with position & price\n\n");
        print_r("\n** TEST * remove position of symbol\n\n");
        $this->post['symbols']['Symbol ' . $this->max_id + 1] = [
            'price' => 1.1,
            'position' => 2.2,
        ];
        unset($this->post['symbols'][$this->symbol][$field]);

        print_r("\nVALIDATE: error: no position or price provided for symbol\n");
        print_r("\nVALIDATE: no updates to symbol2\n");
        $this->postAndValidateNoNewSymbol($this->max_id + 1);
    }

    /**
     * @param mixed $asset_id
     * @return void
     */
    protected function postAndValidateNoNewSymbol(mixed $asset_id): void
    {
        $this->postAssetUpdates(false, 404);

        $pas = $this->getPortfolioAssets($asset_id);
        $this->assetCount(0, $pas);

        $this->_get("assets/" . $asset_id);
        $this->assertApiError(404);
    }

    protected function testNegativePosition(): void
    {
        $this->_testFieldError('position', -1, 6);
    }

    protected function testNullPosition(): void
    {
        $this->_testFieldError('position', null, 7);
    }

    protected function testStringPosition(): void
    {
        $this->_testFieldError('position', "a", 8);
    }

    protected function _testFieldError($field, $value, $days): void
    {
        $this->nextDay($days);
        $this->post['symbols'][$this->symbol][$field] = $value;
        $this->postAndValidateNoNewSymbol($this->max_id + 1);
    }

    protected function testZeroPosition(): void
    {
        print_r("\n** TEST6 * add 1 day to timestamp\n\n");
        print_r("\n** TEST6 * add position=0 for symbol\n\n");
        $this->nextDay(13);
        $this->post['symbols'][$this->symbol]['position'] = 0;

        $this->postAssetUpdates();
        print_r("\nVALIDATE: new position=0 portfolio_asset created\n");
        print_r("\nVALIDATE: no updates for position on symbol2\n");
        $pas = $this->getPortfolioAssets($this->maxId);
        $count = 0;
        foreach ($pas as $pa) {
            if ($this->isInfinity($pa['end_dt'])) {
                $this->assertEquals(0, $pa['position']);
                $count++;
            }
        }
        $this->assertEquals(1, $count);
    }

    protected function testSymbolRemoved(): void
    {
        $this->nextDay(14);
        $pas = $this->getPortfolioAssets($this->maxId);
        $this->assertCount(1, $pas);
        $count = 0;
        foreach ($pas as $pa) {
            if ($this->isInfinity($pa['end_dt'])) {
                $count++;
            }
        }
        $this->assertEquals(0, $count);

        unset($this->post['symbols'][$this->symbol]);
        $this->postAssetUpdates();

        $pas = $this->getPortfolioAssets($this->maxId);
        $this->assertCount(1, $pas);

        $count = 0;
        foreach ($pas as $pa) {
            if ($this->compareTimestamp($pa['end_dt'], $this->post['timestamp'])) {
                $count++;
            }
        }
        $this->assertEquals(0, $count);
    }

    public function test_portfolio_assets_update2()
    {
//        $this->reviewAndResetPortfolio();
////        $this->assertNotNull($this->cash_id);
//        $this->deleteCreatedEntities('asset_prices'); // TODO REMOVE
//        $this->assertEquals(0, $count); // lets start fresh

        // Will relax requirement for now
        // print_r("\n** TEST * existing symbol with feed_id & source with case mismatch (upper/lower)\n\n");
        // print_r("\nVALIDATE: asset is NOT created\n");



        print_r("\n** TEST8 * add 1 day to timestamp\n\n");
        print_r("\n** TEST8 * change price=0\n\n");
        print_r("\nVALIDATE: error: price of asset cannot be zero\n");
        print_r("\nVALIDATE: no updates any prices for either symbol\n");

        print_r("\n** TEST9 * change price=-1.0\n\n");
        print_r("\nVALIDATE: error: price of asset cannot be negative\n");
        print_r("\nVALIDATE: no updates any prices for either symbol\n");

        print_r("\n** TEST10 * remove cash & all symbols\n\n");
        print_r("\nVALIDATE: error: no assets provided\n");



        print_r("\n** TEST Next tests are about price validations in mode=prices ***\n\n");

        print_r("\n** TEST * add 1 day to timestamp\n\n");
        print_r("\n** TEST * add 2 symbols with price only (remove positions)\n\n");
        print_r("\nVALIDATE: no new positions created\n");
        print_r("\nVALIDATE: validate that no error is issued\n");
        print_r("\nVALIDATE: new prices created\n");

        print_r("\n** TEST * add 1 day to timestamp\n\n");
        print_r("\n** TEST * add position=0 for symbol\n\n");
        print_r("\nVALIDATE: error: position was provided in prices mode\n");
        print_r("\nVALIDATE: no updates any prices for either symbol\n");

        print_r("\n** TEST * add 1 day to timestamp\n\n");
        print_r("\n** TEST * change price=0\n\n");
        print_r("\nVALIDATE: error: price of asset cannot be zero\n");
        print_r("\nVALIDATE: no updates any prices for either symbol\n");

        print_r("\n** TEST * change price=-1.0\n\n");
        print_r("\nVALIDATE: error: price of asset cannot be negative\n");
        print_r("\nVALIDATE: no updates any prices for either symbol\n");

        print_r("\n** TEST * remove cash & symbol\n\n");
        print_r("\nVALIDATE: error: no assets provided\n");
    }



    public function __test_account_matching()
    {
        $account_id = 7;
        $this->_get("account_matching_rules");
        foreach($this->data as $amr) {
            if ($amr['account_id'] == $account_id) {
                $this->unsetBase($amr);
                $this->p($amr);
            }
        }

        $this->_get("transactions");
        foreach($this->data as $amr) {
            if ($amr['account_id'] == $account_id) {
                $this->unsetBase($amr);
                $this->p($amr);
            }
        }

        $this->_get("transaction_matchings");
        foreach($this->data as $amr) {
            if (in_array($amr['transaction_id'], [21,23,44])) {
                $this->unsetBase($amr);
                $this->p($amr);
            }
        }

        $this->_get("account_matching/" . $account_id);

        $acct = $this->data;
        $amrs = $acct['account_matching_rule'];
        unset($acct['account_matching_rule']);
        $this->p($acct);

        foreach ($amrs as $amr) {
            $this->unsetBase($amr);
            $am = $amr['matching_rule'];
            unset($amr['matching_rule']);
            $this->unsetBase($am);
            $this->p($am);
            $this->p($amr);
        }
    }

}



