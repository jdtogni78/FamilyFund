<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\Http;
use Tests\ApiTestTrait;
use Tests\TestCase;
use const false;

class ExternalAPITest extends TestCase
{
    use ApiTestTrait, WithoutMiddleware, DatabaseTransactions;

    protected $date;
    protected $base;
    protected $toDelete;
    protected $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->resetCreatedEntities();
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->deleteCreatedEntities();
    }

    public function assertApiError($code=404)
    {
        if ($code != null)
            $this->assertAPIbasics($code, false);
    }
    public function assertApiSuccess()
    {
        $this->assertAPIbasics(200, true);
    }


    protected function updateTimestamp()
    {
        $this->post["timestamp"] = $this->timestamp();
    }

    public function timestamp(): string
    {
        return $this->date->format('Y-m-d') . "T00:00:00";
    }

    public function nextDay(int $days)
    {
        $this->date->modify('+'.$days.' day');
        $this->updateTimestamp();
    }

    public function prevDay()
    {
        $this->date->modify('-1 day');
        $this->updateTimestamp();
    }

    public function _post($api, $data, $v = false)
    {
        print_r("\n ** POST DATA " . json_encode($data) . " **");
        $this->setResponse($this->json(
            'POST',
            $this->base . $api, $data
        ), $v);
    }

    public function p($arr)
    {
        print_r(json_encode($arr) . "\n");
    }

    public function json($method, $uri, array $data = [], array $headers = [])
    {
        $content = json_encode($data);

        $headers = array_merge([
            'CONTENT_LENGTH' => mb_strlen($content, '8bit'),
            'CONTENT_TYPE' => 'application/json',
            'Accept' => 'application/json',
        ], $headers);

        print_r("\n ** $method $uri **\n");
        if ($method == 'GET') {
            $res = Http::withHeaders($headers)->get($uri);
        } else if ($method == 'POST') {
            $res = Http::withHeaders($headers)->post($uri, $data);
        } else if ($method == 'DELETE') {
            $res = Http::withHeaders($headers)->delete($uri);
        }
        return $res;
    }

    public function _get($api, $v = false)
    {
        $this->setResponse($this->json(
            'GET',
            $this->base . $api
        ), $v);
    }

    public function unsetBase(&$arr)
    {
        unset($arr['created_at']);
        unset($arr['deleted_at']);
        unset($arr['updated_at']);
    }

    public function _delete($api, $v = false)
    {
        $this->setResponse($this->json(
            'DELETE',
            $this->base . $api
        ), $v);
    }

    /**
     * @param $code
     * @param $success
     * @return void
     */
    public function assertAPIbasics($code, $success): void
    {
        $this->assertEquals($code, $this->response->getStatusCode());
        $this->assertEquals($success, $this->success);
    }

    /**
     * @param string $table
     * @return void
     */
    public function deleteCreatedEntities(string $table=null): void
    {
        foreach ($this->toDelete as $what => $ids) {
            if ($table == null || $table == $what) {
                foreach ($ids as $id) {
                    $this->_delete($what . "/" . $id);
                }
            }
        }
        $this->resetCreatedEntities();
    }

    /**
     * @return void
     */
    protected function resetCreatedEntities(): void
    {
        $this->toDelete = [
            'assets' => [],
            'asset_prices' => [],
            'portfolio_assets' => [],
        ];
    }
}
